<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>potatojiang`blog</title>
  
  
  <link href="https://potato-vita.github.io/atom.xml" rel="self"/>
  
  <link href="https://potato-vita.github.io/"/>
  <updated>2025-08-24T01:36:09.468Z</updated>
  <id>https://potato-vita.github.io/</id>
  
  <author>
    <name>potatojiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CTF学习]-信息收集小结(web1-20)</title>
    <link href="https://potato-vita.github.io/2025/08/24/CTF%E5%AD%A6%E4%B9%A0-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B0%8F%E7%BB%93-web1-20/"/>
    <id>https://potato-vita.github.io/2025/08/24/CTF%E5%AD%A6%E4%B9%A0-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B0%8F%E7%BB%93-web1-20/</id>
    <published>2025-08-24T00:57:06.000Z</published>
    <updated>2025-08-24T01:36:09.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="web-1"><a href="#web-1" class="headerlink" title="web-1"></a>web-1</h3><p>这关很简单，查看源代码就可以了</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821133535737-1755766280589-16.png" alt="image-20250821133535737"></p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821133558323-1755766280589-17.png" alt="image-20250821133558323"></p><h3 id="web-2"><a href="#web-2" class="headerlink" title="web-2"></a>web-2</h3><p>这关也是查看源代码，下面是writeup里面的话：</p><p>view-source是一种协议，早期基本上每个浏览器都支持这个协议。后来Microsoft考虑安全性，对于WindowsXP pack2以及更高版本以后IE就不再支持此协议。但是这个方法在FireFox和Chrome浏览器都还可以使用。 如果要在IE下查看源代码,只能使用查看中的”查看源代码”命令.以前的使用方法：在浏览器地址栏中输入 view-source: sURL<br><a href="https://ctf.show/writeups/1106223">ctf.show</a></p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821134009104-1755766280590-18.png" alt="image-20250821134009104"></p><h3 id="web-3"><a href="#web-3" class="headerlink" title="web-3"></a>web-3</h3><p>这里看不到源代码，也无法右键，提示说抓包看响应</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821140145372-1755766280590-19.png" alt="image-20250821140145372"></p><p>抓包重放响应包里面有</p><h3 id="web-4"><a href="#web-4" class="headerlink" title="web-4"></a>web-4</h3><p>这里提示的是：总有人把后台地址写入robots，帮黑阔大佬们引路。</p><p>这里涉及到知识点robots.txt</p><p>robots.txt 一个非常重要得到文件，通常情况下，主要用于指定搜索引擎蜘蛛spider在网站里的抓取范围,用于声明蜘蛛不可以抓取哪些网站资源及可以抓取哪些网站资源。</p><p>好处：</p><ol><li><strong>避免浪费爬虫和服务器资源</strong>：阻止爬虫抓取无意义的页面（如站内搜索结果页、后台登录页、无限循环的标签页等），让爬虫更高效地抓取重要内容。</li><li><strong>保护隐私或敏感内容</strong>：防止某些临时页面、测试页面或内部工具被索引和公开。（<strong>注意</strong>：这并非安全措施，敏感内容不应依赖 robots.txt 保护）。</li><li><strong>控制搜索引擎索引的内容</strong>：避免重复内容或低质量内容被索引，从而可能有利于网站的整体SEO。</li><li><strong>防止服务器过载</strong>：大量爬虫频繁抓取某些动态页面可能会导致服务器负载过高，robots.txt 可以对其进行限制。</li></ol><p>但是这只是建议并不是要求，恶意的爬虫可以无视这个文件</p><p>这里我们访问robots.txt</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821140925108-1755766280590-20.png" alt="image-20250821140925108"></p><p>它把我们引导向了flagishere.txt（flag就在这里）</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821141028101-1755766280590-21.png" alt="image-20250821141028101"></p><h3 id="web-5"><a href="#web-5" class="headerlink" title="web-5"></a>web-5</h3><p>这里提示的是：phps源码泄露有时候能帮上忙</p><p><strong>什么是phps文件？</strong></p><p>phps文件是php文件的副本，但是当用户请求php文件时，服务器执行php文件，给用户返回的通常是html文件，但是请求phps文件的时候会返回源代码。</p><p><strong>为什么会有phps文件</strong></p><ol><li><strong>开发者无意中遗留了 <code>.phps</code> 文件</strong>：<ul><li>开发者为了方便团队查看代码，在服务器上创建了某个文件的 <code>.phps</code> 副本（例如 <code>index.php</code> 和 <code>index.phps</code> 同时存在）。</li><li>之后忘记了删除这些 <code>.phps</code> 文件。</li><li>攻击者或任何人直接访问 <code>https://example.com/index.phps</code>，服务器没有正确配置处理 <code>.phps</code> 扩展名，于是将其作为普通文本文件发送，导致源代码泄露。</li></ul></li><li><strong>服务器错误配置了 MIME 类型</strong>：<ul><li>即使没有 <code>.phps</code> 文件，攻击者也可能利用服务器配置缺陷。</li><li>如果服务器没有将 <code>.phps</code> 扩展名关联到 PHP 解析器，或者没有为其设置正确的 <code>Content-Type</code> 头（如 <code>text/plain</code> 或 <code>text/html</code>），那么当请求一个不存在的 <code>.phps</code> 文件时，服务器可能会返回一个目录列表或默认错误页面，但这通常不直接导致泄露。</li><li>更常见的是，攻击者通过<strong>模糊测试</strong>或<strong>目录遍历</strong>，尝试访问已知或猜测的 <code>.php</code> 文件，但将扩展名改为 <code>.phps</code>（例如访问 <code>config.phps</code> 而不是 <code>config.php</code>）。如果服务器对 <code>.phps</code> 请求没有处理机制，它就会直接把源文件内容吐出来。</li></ul></li></ol><p>这里我们访问inde.phps(应该首先扫描目录的，再尝试phps)</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821142330971-1755766280590-22.png" alt="image-20250821142330971"></p><p>这里下载了一个文件，打开直接成功。</p><h3 id="web-6"><a href="#web-6" class="headerlink" title="web-6"></a>web-6</h3><p>这里提示：解压码到当前目录，测试正常，收工</p><p>看了deepseek的解释才明白，这是在部署网页的时候，把整个网页的源码复制到部署目录后解压，但是压缩包还在，所以可以请求这个压缩包获取整个网页的源代码</p><p>我们访问www.zip，下载发现</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821142918688-1755766280590-23.png" alt="image-20250821142918688"></p><p>flag不在这里，但这是压缩包里面的文件，不是正式网页的文件，flag在网页的fl000g.txt里面</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821143352241-1755766280590-24.png" alt="image-20250821143352241"></p><h3 id="web-7"><a href="#web-7" class="headerlink" title="web-7"></a>web-7</h3><p>这里提示版本控制很重要，但不要部署到生产环境里</p><p>.git源码泄露：采用git管理项目时，上传项目忘记删除.git文件，攻击者可通过该文件恢复源码历史版本，从而造成源码泄露</p><p>这里我们访问/.git</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821143610345-1755766280590-25.png" alt="image-20250821143610345"></p><h3 id="web-8"><a href="#web-8" class="headerlink" title="web-8"></a>web-8</h3><p>这里提示的和web7一样，但估计是版本控制的软件不一样，web7用的是git，web8用的是svn</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821143920593-1755766280590-26.png" alt="image-20250821143920593"></p><p>这里git泄露和svn泄露有机会可以多多练习一下。</p><h3 id="web-9"><a href="#web-9" class="headerlink" title="web-9"></a>web-9</h3><p>这里提示：发现网页有个错别字，赶紧在生产环境vim改下，不好，死机了。</p><p>这里应该是有关于vim的漏洞</p><p>看writeup提示：</p><p>本题目的是让答题者了解到vim编辑器使用时会有一个缓存文件，这个缓存文件在保存时进行删除，但是在vim意外退出时这个缓存文件，会以源文件加一个.swp后缀进行保存，我们可以尝试访问这些文件来尝试获取一些文件。默认情况下，Vim 会在<strong>正在编辑的文件所在目录</strong>下创建这个缓存文件，并且其文件名以 <code>.</code> 开头，以 <code>.swp</code> 结尾（例如，编辑 <code>index.php</code> 会生成 <code>.index.php.swp</code>）。在多次异常退出后，还可能看到 <code>.swo</code>, <code>.swn</code> 等后缀的旧缓存文件。</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821145029022-1755766280590-27.png" alt="image-20250821145029022"></p><p>下载，打开成功</p><h3 id="web-10"><a href="#web-10" class="headerlink" title="web-10"></a>web-10</h3><p>这里提示cookie只是一块饼干，不能存放任何隐私数据</p><p>本题目是让答题者了解到cookie，cookie一般用于在身份认证的过程中保存一些信息，用于服务器来验证身份,在测试中可以尝试注入等方式。可以使用burp/F12中的网络来查看</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821150240865-1755766280591-28.png" alt="image-20250821150240865"></p><h3 id="web-11"><a href="#web-11" class="headerlink" title="web-11"></a>web-11</h3><p>这里提示：域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息</p><p>DNS不仅可以储存域名还可以储存这些： • A记录：存IP地址 • TXT记录：存任意文本（出题人最爱藏flag的地方！） • CNAME记录：域名别名</p><p>由于flag会变这里直接给出了答案</p><h3 id="web-12"><a href="#web-12" class="headerlink" title="web-12"></a>web-12</h3><p>这里提示：有时候网站上的公开信息，就是管理员常用密码</p><p>这里跳转了一个购物界面，点了所有的按钮发现只有一个界面，在这个界面里面发现有一个帮助热线号码，这里就猜想这个号码就是管理员密码</p><p>找到登录后门/admin，尝试登录，成功</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821151328383-1755766280591-29.png" alt="image-20250821151328383"></p><h3 id="web-13"><a href="#web-13" class="headerlink" title="web-13"></a>web-13</h3><p>这里提示：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p><p>这里来到了一个购物界面，点开有一个document的用户手册，发现一个登录界面。</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821151659240-1755766280591-30.png" alt="image-20250821151659240"></p><p>按照地址登录成功</p><h3 id="web-14"><a href="#web-14" class="headerlink" title="web-14"></a>web-14</h3><p>这里提示：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人。</p><p>这里看writup打开一个/editor，一个在线的编译器？在部署网页里能有这个？涨见识了，打开插入文件，在文件空间里面居然是服务器的文件空间不是本地的。</p><p>在/var/www/html/nothinghere里面找到fl000g.txt成功</p><h3 id="web-15"><a href="#web-15" class="headerlink" title="web-15"></a>web-15</h3><p>这里提示公开的信息比如邮箱，有可能造成信息泄露，产生严重后果</p><p>这里我们打开网站，在下面发现一个qq邮箱，qq邮箱是有qq号来的，我们获得了qq号，查找这个qq，发现了大牛，来自陕西西安</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821153737777.png" alt="image-20250821153737777"></p><p>来到后台登录的/admin，忘记密码，填写密保问题西安，</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821153946732.png" alt="image-20250821153946732"></p><p>成功来到后台</p><h3 id="web-16"><a href="#web-16" class="headerlink" title="web-16"></a>web-16</h3><p>这里提示：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p><p><strong>什么是探针？</strong></p><p>PHP探针（PHP Probe）是一个用PHP编写的脚本，其主要功能是<strong>实时检测服务器的工作状态和运行环境</strong>。一个典型的探针通常会显示以下信息：</p><ul><li><strong>服务器系统信息</strong>：操作系统类型、版本、系统时间、运行时间等。</li><li><strong>PHP环境信息</strong>：PHP版本、运行方式（如CGI, FastCGI, Apache模块等）、安全模式开关、PHP配置文件（php.ini）路径。</li><li><strong>服务器组件信息</strong>：Web服务器类型（Apache, Nginx, IIS等）及版本、Perl、Python、数据库支持等。</li><li><strong>硬件资源信息</strong>：CPU型号和数量、内存大小及实时使用情况（物理内存、虚拟内存使用率）、硬盘分区及使用情况。</li><li><strong>网络信息</strong>：服务器IP地址、域名、DNS信息等。</li><li><strong>性能检测</strong>：服务器连接速度、计算能力测试等。</li><li><strong>PHP已编译模块</strong>：<code>phpinfo()</code> 函数输出的所有信息，这包含了极其详尽的配置细节。</li></ul><p>常见的探针程序有雅黑PHP探针、X探针、ServerStatus等，很多运维人员、开发者和站长喜欢使用它来快速了解服务器状况。</p><p><strong>为什么PHP探针会导致信息泄露？</strong></p><p>探针的设计初衷是<strong>给管理员看的</strong>，它需要汇集大量的敏感信息来帮助管理员诊断问题。问题就出在：</p><ol><li><strong>错误的部署位置</strong>：开发者或运维人员可能为了方便，将探针脚本直接部署在网站的Web目录下（如 <code>/tz.php</code>、<code>/info.php</code>），使得任何人都可以通过浏览器公开访问它。</li><li><strong>临时使用后未删除</strong>：在调试服务器或排查问题后，忘记删除这个临时的探针文件。</li><li><strong>弱口令或无需口令</strong>：某些探针自带简单的密码验证，但如果设置了一个弱密码（如 <code>admin/admin</code>），或者根本没有设置密码，攻击者可以轻易绕过。</li><li><strong>被扫描工具发现</strong>：攻击者会使用自动化工具（如AWVS, AppScan, 御剑等）或简单的字典，批量扫描互联网上的服务器，寻找诸如 <code>tz.php</code>、<code>phpinfo.php</code>、<code>info.php</code> 等常见探针文件路径。</li></ol><p>这里本来需要扫描的，但是懒得等了，直接来到/tz.php</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821154610315.png" alt="image-20250821154610315"></p><p>点击phpinfo，在里面找到了flag</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821154849280.png" alt="image-20250821154849280"></p><h3 id="web-17"><a href="#web-17" class="headerlink" title="web-17"></a>web-17</h3><p>这里提示：备份的sql文件会泄露敏感信息</p><p><strong>什么是备份的SQL文件？</strong></p><p>在运维和开发过程中，为了保证数据安全，我们经常会定期对网站的数据库（如MySQL、PostgreSQL）进行备份。备份通常是通过命令行工具（如 <code>mysqldump</code>）或管理面板（如phpMyAdmin、cPanel）生成的，其结果是一个或多个以 <code>.sql</code> 或 <code>.sql.gz</code> 等结尾的文本文件。</p><p>这个文件包含了<strong>重建数据库所需的所有SQL命令</strong>，例如：</p><ul><li><code>CREATE TABLE</code> 语句（表结构）</li><li><code>INSERT INTO</code> 语句（所有数据记录）</li></ul><p>根据题目提示backup.sql直接在url后面加上backup.sql即可下载到备份的sql文件，里面有flag。</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821161841430.png" alt="image-20250821161841430"></p><h3 id="web-18"><a href="#web-18" class="headerlink" title="web-18"></a>web-18</h3><p>这里提示：不要着急，休息，休息一会儿，玩101分给你flag</p><p>进去是一个bird游戏，这里代码审计发现判断语句</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821163120465.png" alt="image-20250821163120465"></p><p>把这段编码过来就是</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821163221301.png" alt="image-20250821163221301"></p><p>去/110.php发现flag</p><h3 id="web-19"><a href="#web-19" class="headerlink" title="web-19"></a>web-19</h3><p>这里提示：密钥什么的，就不要放在前端了</p><p>打开就是一个登录界面</p><p>这里用的是AES加密，参数全在js代码 中， mode模式： CBC padding填充方式： ZeroPadding 密文输出编码： 十六进制hex 偏移量iv: ilove36dverymuch 密钥：0000000372619038 密文为： a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p><p>然后得到明文：i_want_a_36d_girl</p><p>直接登录</p><p><img src="./../imgs/$%7Bfiilename%7D/image-20250821164132102.png" alt="image-20250821164132102"></p><h3 id="web-20"><a href="#web-20" class="headerlink" title="web-20"></a>web-20</h3><p>这里提示：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p><p>在传统的ASP网站配合Access数据库的架构中，整个网站的数据都存储在一个.mdb文件里。如果由于运维人员的配置失误，导致这个.mdb文件可以通过互联网直接下载，那么就意味着攻击者能够轻而易举地获得整个数据库的完整副本。这无异于数据库被连锅端走，是最高级别的安全事件之一。</p><p>这里访问/db/db.mdb，在文件里面找flag，就可以找到。</p><h3 id="信息收集总结"><a href="#信息收集总结" class="headerlink" title="信息收集总结"></a>信息收集总结</h3><p>这里的20个题目的信息收集都很简单，很多直接扫描目录后直接就出来了，很多都是一些配置，部署网站的时候粗心大意的操作，比如git，svn的老版还在生产环境中，直接在生产目录解压网站源代码，自己粗心大意的把信息放在邮箱，密码放在前端等，还有就是软件的版本出现的漏洞。一年前做第一遍的时候还不知道信息收集的目的，现在再做一遍有了很大的理解。做攻防的第一步就是去收集信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h2&gt;&lt;h3 id=&quot;web-1&quot;&gt;&lt;a href=&quot;#web-1&quot; class=&quot;headerlink&quot; title=&quot;web-1&quot;&gt;</summary>
      
    
    
    
    <category term="CTF学习" scheme="https://potato-vita.github.io/categories/CTF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CTF, 信息收集， web" scheme="https://potato-vita.github.io/tags/CTF-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%EF%BC%8C-web/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://potato-vita.github.io/2025/08/23/hello-world/"/>
    <id>https://potato-vita.github.io/2025/08/23/hello-world/</id>
    <published>2025-08-23T13:40:07.700Z</published>
    <updated>2025-08-23T13:40:07.700Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
